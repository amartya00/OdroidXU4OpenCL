// -*-c++-*-
/**
 * File     : CLWrapper
 * Contents : Contains class prototypes for:
 *             CLWrapper, LOG and CLWrapperException
 */

#ifndef ODROID_CL_CL_WRAPPER
#define ODROID_CL_CL_WRAPPER

#include "cl.hpp"
#include "Logger" 
#include "CLWrapperException"
#include "KernelExecutor"
#include "CLBuffer"

#include <string>
#include <fstream>
#include <vector>
#include <cstdlib>
#include <iostream>


namespace OdroidXU4
{ 
  
    class CLWrapper
    {
        private :
            Logger logger ;
             std::string buffer ;
            cl::Platform platform ;
            cl::Device bigGPU ;
            cl::Device smallGPU ;
            cl::Context context ;
            cl::Program program ;
            cl::CommandQueue bigGPUQueue ;
            cl::CommandQueue smallGPUQueue ;

            void getPlatform() ;
            void getDevices() ;
            void prepareCommQueue() ;
            void prepareProgram(std::vector <std::string>) ;
            void prepareProgram(std::string) ;
        
        public :
            CLWrapper() { }
            CLWrapper(std::vector <std::string>, std::string) ;
            CLWrapper(std::string, std::string) ;
            void setup(std::vector <std::string>, std::string)  ;
            void setup(std::string, std::string)  ;
    
            cl::Context getContext() { return context ; } 
            cl::Program getProgObj() { return program ; } 
            cl::CommandQueue getBigCommQueue() { return bigGPUQueue ; }
            cl::CommandQueue getSmallCommQueue() { return smallGPUQueue ; } 
            template <typename T, cl_mem_flags F> CLBuffer<T, F> getBigBuffer(void *, size_t) ;
            template <typename T, cl_mem_flags F> CLBuffer<T, F> getSmallBuffer(void *, size_t) ;
            
            template <typename     T0           , typename     T1 = NullType, typename     T2 = NullType,
                      typename     T3 = NullType, typename     T4 = NullType, typename     T5 = NullType,
                      typename     T6 = NullType, typename     T7 = NullType, typename     T8 = NullType,
                      typename     T9 = NullType> 
            KernelExecutor<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> getKernelExecutorBig(std::string kernelName, cl::NDRange offset, cl::NDRange global, cl::NDRange local)
            {
                return KernelExecutor<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(program, kernelName, bigGPUQueue, offset, global, local) ;
            }
            
            template <typename     T0           , typename     T1 = NullType, typename     T2 = NullType,
                      typename     T3 = NullType, typename     T4 = NullType, typename     T5 = NullType,
                      typename     T6 = NullType, typename     T7 = NullType, typename     T8 = NullType,
                      typename     T9 = NullType> 
            KernelExecutor<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> getKernelExecutorSmall(std::string kernelName, cl::NDRange offset, cl::NDRange global, cl::NDRange local)
            {
                return KernelExecutor<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(program, kernelName, smallGPUQueue, offset, global, local) ;
            }
    } ;


    /*
     * CLWrapper funtion definitions:
     ** Private **
     * [1 ] void getPlatform()
     * [2 ] void getDevices()
     * [3 ] void prepareCommQueue()
     * [4 ] void prepareProgram(std::vector <std::string>)
     * [5 ] void prepareProgram(std::string)
     ** Public **
     * [6 ] CLWrapper() { }
     * [7 ] CLWrapper(std::vector <std::string>, std::string)
     * [8 ] CLWrapper(std::string, std::string)
     * [9 ] void setup(std::vector <std::string>, std::string)
     * [10] void setup(std::string, std::string)
     * [11] cl::Context getContext()
     * [12] cl::Program getProgObj()
     * [13] cl::CommandQueue getBigCommQueue()
     * [14] cl::CommandQueue getSmallCommQueue()
     * [15] template <typename T, cl_mem_flags F> CLBuffer<T, F> getBigBuffer(void *hostPtr, size_t size) 
     * [16] template <typename T, cl_mem_flags F> CLBuffer<T, F> getSmallBuffer(void *hostPtr, size_t size) 
     * [17] template <...> KernelExecutor<...> getKernelExecutorBig(std::string)
     */
    CLWrapper::CLWrapper(std::vector <std::string> files, std::string log)
    {
        logger.setLogFile(log) ;
        getPlatform() ;
        getDevices() ;
        prepareCommQueue() ;
        prepareProgram(files) ;
    }

    CLWrapper::CLWrapper(std::string buffer, std::string log)
    {
        logger.setLogFile(log) ;
        getPlatform() ;
        getDevices() ;
        prepareCommQueue() ;
        prepareProgram(buffer) ;
    }
    
    void CLWrapper::setup(std::vector <std::string> files, std::string log)
    {
        logger.setLogFile(log) ;
        getPlatform() ;
        getDevices() ;
        prepareCommQueue() ;
        prepareProgram(files) ;
    }

    void CLWrapper::setup(std::string buffer, std::string log)
    {
        logger.setLogFile(log) ;
        getPlatform() ;
        getDevices() ;
        prepareCommQueue() ;
        prepareProgram(buffer) ;
    }
    
    void CLWrapper::getPlatform()
    {
        logger.log(LogLevel::INFO, "Attempting to get platform") ;
        std::vector<cl::Platform>  platforms ;
        cl_int errNum = cl::Platform::get(&platforms) ;
        if (errNum != CL_SUCCESS || platforms.size() <= 0) {
            logger.log(LogLevel::ERROR, "Could not retrieve platforms") ;       
            throw CLWrapperException("Could not retrieve platforms") ;
        }
        logger.log(LogLevel::INFO, "Obtained platform") ;
        platform = platforms[0] ;
        logger.log(LogLevel::INFO, "Default : Platorm name string: " +platform.getInfo<CL_PLATFORM_NAME>()) ;
        logger.log(LogLevel::INFO, "Default : Platorm vendor string: " +platform.getInfo<CL_PLATFORM_VENDOR>()) ;
        logger.log(LogLevel::INFO, "Default : Platorm profile string: " +platform.getInfo<CL_PLATFORM_PROFILE>()) ;
    }

    void CLWrapper::getDevices()
    {
        logger.log(LogLevel::INFO, "Attempting to get devices") ;
        std::vector <cl::Device> allDevices ;
        cl_int errNum = platform.getDevices(CL_DEVICE_TYPE_GPU, &allDevices) ;
        if (errNum != CL_SUCCESS || allDevices.size() < 2) {
            logger.log(LogLevel::ERROR, "Could not obtain both GPUs") ;
            throw CLWrapperException("Could not obtain both GPUs") ;
        }
        if (allDevices[0].getInfo<CL_DEVICE_MAX_COMPUTE_UNITS>() == 4) {
            bigGPU = allDevices[0] ;
            smallGPU = allDevices[1] ;
        } else {
            bigGPU = allDevices[1] ;
            smallGPU = allDevices[0] ;
        }
        logger.log(LogLevel::INFO, "Obtained both GPUs") ;
        int nDimsBig = bigGPU.getInfo<CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS>() ;
        int nDimsSmall = bigGPU.getInfo<CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS>() ;
        std::vector<size_t> sizesBig = bigGPU.getInfo<CL_DEVICE_MAX_WORK_ITEM_SIZES>() ;
        std::vector<size_t> sizesSmall = smallGPU.getInfo<CL_DEVICE_MAX_WORK_ITEM_SIZES>() ;
        logger.log(LogLevel::INFO, "Max dimensions in big GPU: " + std::to_string(nDimsBig)) ;
        logger.log(LogLevel::INFO, "Max dimensions in small GPU: " + std::to_string(nDimsSmall)) ;
        logger.log(LogLevel::INFO, "Max WI sizes for big GPU: (" + std::to_string(sizesBig[0]) + " , " + std::to_string(sizesBig[0]) + " , " + std::to_string(sizesBig[0]) + ")") ;
        logger.log(LogLevel::INFO, "Max WI sizes for small GPU: (" + std::to_string(sizesSmall[0]) + " , " + std::to_string(sizesSmall[0]) + " , " + std::to_string(sizesSmall[0]) + ")") ;

        context = cl::Context({bigGPU, smallGPU}) ;
    }

    void CLWrapper::prepareCommQueue()
    {
        bigGPUQueue = cl::CommandQueue(context, bigGPU) ;
        smallGPUQueue = cl::CommandQueue(context, smallGPU) ;
    }

    void CLWrapper::prepareProgram(std::vector <std::string> files)
    {
        logger.log(LogLevel::INFO, "Creating program from files") ;
        for (unsigned int i = 0; i < files.size(); i++) {
            std::ifstream inf(files[i].c_str(), std::ifstream::in) ;
            if (!inf.is_open()) {
                logger.log(LogLevel::ERROR, "Could not open source file : " + files[i]) ;
                throw(CLWrapperException("Could not open source file " + files[i] + "\n")) ;
             }
            buffer = buffer + "\n//" + files[i] + "\n";
            buffer = buffer + std::string(std::istreambuf_iterator<char>(inf),
                                          std::istreambuf_iterator<char>()) ;
            logger.log(LogLevel::INFO, "Read source file " + files[i]) ;
            inf.close() ;
        }
        
        program =  cl::Program(context, buffer) ;
        if (program.build({bigGPU, smallGPU}) != CL_SUCCESS) {
            std::string bigGPUErrorLog = program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(bigGPU) ;
            std::string smallGPUErrorLog = program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(smallGPU) ;
            logger.log(LogLevel::ERROR, "Program object compilation error\nBigGPU:\n" +
                       bigGPUErrorLog + "\nSmallGPU:\n" +
                       smallGPUErrorLog) ;
            throw CLWrapperException("Program object compilation error\nBigGPU:\n" +
                       bigGPUErrorLog + "\nSmallGPU:\n" +
                       smallGPUErrorLog) ;
        }
        logger.log(LogLevel::INFO, "Successfully compiled program ojects for both GPUs") ;
    }

    void CLWrapper::prepareProgram(std::string buffer)
    {
        logger.log(LogLevel::INFO, "Creating program from string") ;
        program =  cl::Program(context, buffer) ;
        if (program.build({bigGPU, smallGPU}) != CL_SUCCESS) {
            std::string bigGPUErrorLog = program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(bigGPU) ;
            std::string smallGPUErrorLog = program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(smallGPU) ;
            logger.log(LogLevel::ERROR, "Program object compilation error\nBigGPU:\n" +
                       bigGPUErrorLog + "\nSmallGPU:\n" +
                       smallGPUErrorLog) ;
            throw CLWrapperException("Program object compilation error\nBigGPU:\n" +
                       bigGPUErrorLog + "\nSmallGPU:\n" +
                       smallGPUErrorLog) ;
        }
        logger.log(LogLevel::INFO, "Successfully compiled program ojects for both GPUs") ;
    }

    template <typename T, cl_mem_flags F> CLBuffer<T, F> CLWrapper::getBigBuffer(void *hostPtr, size_t size)
    {
        logger.log(LogLevel::INFO, "Creating a buffer for big GPU of size: " + std::to_string(size)) ;
        return CLBuffer<T, F>(context, bigGPUQueue, size, hostPtr) ;
    }
    
    template <typename T, cl_mem_flags F> CLBuffer<T, F> CLWrapper::getSmallBuffer(void *hostPtr, size_t size)
    {
        logger.log(LogLevel::INFO, "Creating a buffer for small GPU of size: " + std::to_string(size)) ;
        return CLBuffer<T, F>(context, smallGPUQueue, size, hostPtr) ;
    }
    
}
#endif
